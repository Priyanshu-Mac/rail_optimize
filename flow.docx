# Rail Optimization System – Project Flow & Architecture

---

## 1. System Overview

A real-time train coordination and conflict resolution platform using Node.js/Express, MongoDB, Socket.IO, React/TypeScript/Tailwind, and a Python-based AI/ML service. Provides live train tracking, conflict detection, AI-powered decisions, and a modern dashboard for operators.

---

## 2. High-Level Architecture Diagram

```
+-------------------+      WebSocket/API      +-------------------+      REST API      +-------------------+
|   Frontend (React)| <--------------------> | Backend (Node.js)  | <---------------> |   MongoDB         |
|   Dashboard       |                        | Express/Socket.IO  |                   |   (Database)      |
+-------------------+                        +-------------------+                   +-------------------+
         |                                                                                  ^
         |                                                                                  |
         |                                                                                  |
         |      HTTP/REST API (for AI decisions)                                            |
         +-------------------------->  Python AI/ML Service  <-----------------------------+
```

---

## 3. Backend (Node.js/Express/MongoDB/Socket.IO)

### Main Files & Folders
- `server.js`: Main server, sets up Express, Socket.IO, connects MongoDB, loads routes/controllers.
- `controllers/`: Modular business logic (e.g., `trainController.js`, `userController.js`).
- `models/`: Mongoose schemas for Train, Station, User, CompletedJourney.
- `routes/`: Express route definitions (e.g., `trainRoutes.js`).
- `socket.js`, `socketTrain.js`, `socketBase.js`: Real-time event handling for trains, conflicts, and network updates.
- `utils/`, `middlewares/`, `data/`: Utility functions, middleware, and sample/mock data.

### Tech Stack
- Node.js, Express.js
- MongoDB (Mongoose ODM)
- Socket.IO (real-time updates)
- dotenv (env config), cors, bcrypt, jsonwebtoken

### Backend Flow (Stepwise)
1. **Startup**: `server.js` loads environment, connects to MongoDB, sets up Express, loads all routes/controllers, and initializes Socket.IO.
2. **API Endpoints**: RESTful endpoints for trains, stations, conflicts, users, and system status.
3. **WebSocket Events**: Real-time updates for train positions, conflicts, and AI decisions are pushed to all connected clients.
4. **AI/ML Integration**: When a conflict is detected, backend calls the Python AI/ML service via HTTP, receives a decision, and applies it.
5. **Database**: All train, station, user, and journey data is persisted in MongoDB.

### API Routes
- `GET /api/trains` – List all trains
- `GET /api/trains/:id` – Get train by ID
- `POST /api/trains` – Add new train (random or user-defined)
- `PUT /api/trains/:id` – Update train details
- `DELETE /api/trains/:id` – Remove train
- `GET /api/stations` – List all stations
- `GET /api/stations/:id` – Get station by ID
- `GET /api/conflicts` – List active conflicts
- `POST /api/conflicts/:id/resolve` – Resolve a conflict (calls AI/ML)
- `GET /api/decisions` – Get AI decision history
- `GET /api/users` – List users
- `POST /api/users` – Register user
- `GET /api/users/:id` – Get user profile, journeys, stats
- `GET /api/status` – Health check
- `GET /api/metrics` – Performance metrics

---

## 4. AI/ML Service (Python/Flask)
- Receives conflict data from backend via HTTP.
- Analyzes features: train priorities, delays, congestion, time, weather.
- Returns optimal decision (e.g., which train to hold/proceed).
- Trained on synthetic railway data.

---

## 5. Frontend (React/TypeScript/Tailwind/Leaflet)

### Main Files & Folders
- `src/App.tsx`: Main app entry, sets up routes and context.
- `src/dashboard/components/`: Modular UI components (map, stats, train list, conflicts, AI decisions, forms).
  - `DashboardApp.tsx`: Main dashboard logic, handles WebSocket, API calls, and state.
  - `AddTrain.jsx`: Form to add new trains (random or user-defined).
  - `Profile.jsx`: User profile and journey analytics.
  - `Footer.tsx`, `Navbar.tsx`: Layout components.
- `src/styles/`: Global and Tailwind CSS.
- `public/`: Static assets.

### Tech Stack
- React 18, TypeScript
- Tailwind CSS, MUI, Radix UI
- Chart.js, react-chartjs-2, recharts (analytics)
- Leaflet.js (interactive map)
- Socket.IO-client (real-time)
- axios, react-router-dom

### Frontend Flow (Stepwise)
1. **Startup**: Loads dashboard, connects to backend via Socket.IO for real-time updates.
2. **Data Fetching**: On load, fetches trains, stations, conflicts via REST API.
3. **Live Updates**: Receives train/route/conflict updates via WebSocket, updates UI instantly.
4. **User Actions**: Users can add trains (random or custom), view details, resolve conflicts, and see analytics.
5. **Visualization**: Map shows live train positions, stats panels show network health, charts show analytics.
6. **AI Decisions**: When a conflict is resolved, the AI decision and reasoning are shown in the dashboard.

---

## 6. Data Flow Example (with Diagram)

```
[User Adds Train]
      |
      v
[Frontend] --POST--> [Backend] --Save--> [MongoDB]
      |                                 ^
      |                                 |
      |<------WebSocket Update----------|
      v
[All Dashboards Update Live]

[Conflict Detected]
      |
      v
[Backend] --POST--> [AI/ML Service]
      |<---Decision---|
      v
[Backend Updates Trains/Conflicts]
      |
      v
[WebSocket Update to All Clients]
```

---

## 7. Sample Data

### Stations
```json
{
  "DEL": { "name": "New Delhi", "lat": 28.6139, "lng": 77.2090 },
  "AGR": { "name": "Agra", "lat": 27.1767, "lng": 78.0081 },
  "JHS": { "name": "Jhansi", "lat": 25.4484, "lng": 78.5685 },
  "BPL": { "name": "Bhopal", "lat": 23.2599, "lng": 77.4126 },
  "NGP": { "name": "Nagpur", "lat": 21.1458, "lng": 79.0882 }
}
```

### Train Example
```json
{
  "name": "Express 1694092800000",
  "type": "Express",
  "priority": 1,
  "route": ["DEL", "AGR", "JHS"],
  "speed": 85,
  "departureTime": "10:30"
}
```

### Conflict Example
```json
{
  "station": "AGR",
  "trains": [
    { "id": "T1", "name": "Express 1", "priority": 1 },
    { "id": "T2", "name": "Local 2", "priority": 3 }
  ],
  "severity": "HIGH"
}
```

---

## 8. Real-Time Flow Diagram (Stepwise)

```
1. Train Added/Updated   --> Backend --> MongoDB --> Socket.IO --> All Dashboards
2. Conflict Detected     --> Backend --> AI/ML Service --> Decision --> Backend --> Socket.IO --> All Dashboards
3. User Action (resolve) --> Backend --> AI/ML --> Update --> All Dashboards
```

---

## 9. Tech Stack Summary
- **Backend**: Node.js, Express, MongoDB, Socket.IO, Mongoose, dotenv, cors, bcrypt, JWT
- **Frontend**: React, TypeScript, Tailwind CSS, MUI, Radix UI, Chart.js, Leaflet, Socket.IO-client, axios
- **AI/ML**: Python, Flask, scikit-learn, pandas
- **DevOps**: Docker, Nginx (optional)

---

## 10. Key Features Recap
- Real-time train tracking and conflict resolution
- AI-powered decision making
- Priority-based train management
- Interactive dashboard with analytics and map
- User journey analytics and profile tracking
- Modular, scalable, and maintainable codebase

---

*This document provides a comprehensive, stepwise, and visual flow of the Rail Optimization System for presentations and documentation.*
